/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Marlabs.Main;

import static Marlabs.Main.FrameTestCases.sort;
import Marlabs.Constants.Constants;
import Marlabs.Core.BaseClass;
import Marlabs.Core.Xls_Reader;
import Marlabs.Objects.OR;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.util.Random;

import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;


/**
 * @author Selenium
 *
 */
/**
 * @author Selenium
 *
 */
public class Index extends javax.swing.JFrame   {
    
     private AutomationTask automationTask;
     
     class AutomationTask extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            Random random = new Random();
            int progress = 0;
            //Initialize progress property.
            setProgress(0);
            while (progress < 100) {
                //Sleep for up to one second.
                try {
                    Thread.sleep(random.nextInt(1000));
                } catch (InterruptedException ignore) {}
                //Make random progress.
                progress += random.nextInt(10);
               // setProgress(Math.min(progress, 100));
                pbAutomationStatus.setValue(Math.min(progress, 100)); 
            }
            return null;
        }
 
        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Automation Completed","Progress",JOptionPane.OK_OPTION);
            pbAutomationStatus.setVisible(false);
        }
    }
    
    public void AutomationProgressTracker()
    {
        int selectedTestCase = Constants.FlaggedTCs.size();
        int completedTestCase = 0;
        
        int completedPercentage = 0;
        
        while (selectedTestCase - completedTestCase == 0)
        {
            try
            {
                /*
                ResultSet completeCount = null;
                try
                {
                    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
                    Connection connection = DriverManager.getConnection("jdbc:sqlserver://paradigm-dev;databaseName=fast2009demo;", "discweb", "eil892ja");
                    Statement st = connection.createStatement();
                    completeCount = st.executeQuery("select NAME from RedactionSet");
                    completeCount.next();
                    completedTestCase = completeCount.getInt(1);
                }
                catch(ClassNotFoundException | InstantiationException | IllegalAccessException | SQLException exp)
                {
                    String error = exp.getMessage();
                }
                */
                
                completedTestCase += 10;
                
                completedPercentage = (int) (completedTestCase / selectedTestCase) * 100;
                
                pbAutomationStatus.setValue(completedPercentage);
                pbAutomationStatus.setStringPainted(true);
                Thread.sleep(2500);
            }
            catch(InterruptedException ex)
            {
                
            }
        }
        
        pbAutomationStatus.setVisible(false);
        
    }
     /**
     * Creates new form Index
     */
    public Index() {
        initComponents();
        SetIcon();
        LoadEnvironments();
        pbAutomationStatus.setVisible(false);
        LoadModules(cmbTestSuite.getSelectedItem());
        OR.storeObjects();
		BaseClass.generateRunID();
		BaseClass.generateCustomerProdutID();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jDialog1 = new javax.swing.JDialog();
        pnlMain = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        cmbEnvironment = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbTestSuite = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnSelectTestCases = new javax.swing.JButton();
        btnLaunch = new javax.swing.JButton();
        chkMobileAutomate = new javax.swing.JCheckBox();
        pbAutomationStatus = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        cmbModules = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cmbSubModules = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbFramework = new javax.swing.JComboBox();
        btnSelectBrowsers = new javax.swing.JButton();
        chkAllTestCases = new javax.swing.JCheckBox();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Marlabs Automation Framework");
        setName("frameAutomationFramework"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        pnlMain.setBackground(new java.awt.Color(204, 204, 204));
        pnlMain.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnClose.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnClose.setText("Exit");
        btnClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        cmbEnvironment.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbEnvironment.setName("cmbEnvironment"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel1.setText("Enviornment");

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel3.setText("Test Suite");

        cmbTestSuite.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbTestSuite.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Regression", "Smoke" }));
        cmbTestSuite.setName("cmbTestSuite"); // NOI18N
        cmbTestSuite.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTestSuiteItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jLabel5.setText("Automation Framework");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/FAQ-icon - Copy.png"))); // NOI18N
        jLabel6.setToolTipText("Help on Marlabs Automation Framework");

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logo.png"))); // NOI18N

        btnSelectTestCases.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSelectTestCases.setText("...");
        btnSelectTestCases.setToolTipText("Please select the Test Cases to be executed");
        btnSelectTestCases.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelectTestCases.setPreferredSize(new java.awt.Dimension(45, 29));
        btnSelectTestCases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectTestCasesActionPerformed(evt);
            }
        });

        btnLaunch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnLaunch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLaunch.setLabel("Launch");
        btnLaunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaunchActionPerformed(evt);
            }
        });

        chkMobileAutomate.setText("Automate on Mobile");
        chkMobileAutomate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkMobileAutomateItemStateChanged(evt);
            }
        });

        pbAutomationStatus.setStringPainted(true);

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel4.setText("Module");

        cmbModules.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbModules.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbModules.setName("cmbTestSuite"); // NOI18N
        cmbModules.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbModulesItemStateChanged(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel8.setText("Sub-Module");

        cmbSubModules.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbSubModules.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--" }));
        cmbSubModules.setName("cmbTestSuite"); // NOI18N

        jLabel9.setFont(new java.awt.Font("Calibri", 1, 16)); // NOI18N
        jLabel9.setText("Framework");

        cmbFramework.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cmbFramework.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Keyword", "Procedure" }));
        cmbFramework.setName("cmbTestSuite"); // NOI18N
        cmbFramework.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFrameworkActionPerformed(evt);
            }
        });

        btnSelectBrowsers.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        btnSelectBrowsers.setText("Select Browsers...");
        btnSelectBrowsers.setToolTipText("Please select the Test Cases to be executed");
        btnSelectBrowsers.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelectBrowsers.setPreferredSize(new java.awt.Dimension(45, 29));
        btnSelectBrowsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectBrowsersActionPerformed(evt);
            }
        });

        chkAllTestCases.setText("Run All Test Cases");
        chkAllTestCases.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkAllTestCasesItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(216, 216, 216))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                        .addComponent(btnLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMainLayout.createSequentialGroup()
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbFramework, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbEnvironment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbTestSuite, 0, 259, Short.MAX_VALUE)
                                .addComponent(cmbModules, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbSubModules, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnSelectBrowsers, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chkMobileAutomate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)))
                    .addComponent(pbAutomationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnSelectTestCases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkAllTestCases)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(28, 28, 28)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFramework, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(16, 16, 16)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEnvironment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(22, 22, 22)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTestSuite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(chkAllTestCases))
                .addGap(22, 22, 22)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbModules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSubModules, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnSelectTestCases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSelectBrowsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(chkMobileAutomate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLaunch, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pbAutomationStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cmbEnvironment.getAccessibleContext().setAccessibleName("cmbEnvironment");
        cmbTestSuite.getAccessibleContext().setAccessibleName("cmbTestSuite");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void close(){
        WindowEvent closeEvt = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeEvt);
    }
    
    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
               //Initialize the excel and get the configured values
		System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSelectTestCasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectTestCasesActionPerformed
        regFrame.setVisible(false);
        smokeFrame.setVisible(false);
        mobileFrame.setVisible(false);
        browserFrame.setVisible(false);
        
        testCaseFrame.LoadTestCases(cmbTestSuite.getSelectedItem(), cmbModules.getSelectedItem(), cmbSubModules.getSelectedItem());
        testCaseFrame.setVisible(true);
        /*
        if(cmbTestSuite.getSelectedItem() == "Regression" )
        {
           regFrame.setVisible(true);
           regFrame.setAlwaysOnTop( true );
        }
        else if(cmbTestSuite.getSelectedItem() == "Smoke" )
        {
           smokeFrame.setVisible(true);
           smokeFrame.setAlwaysOnTop((true));
        }
        */
    }//GEN-LAST:event_btnSelectTestCasesActionPerformed

    private void btnLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaunchActionPerformed
		
    	//Selected framework
    	Constants.SelectedFramework = cmbFramework.getSelectedItem().toString();
    	
    	//Selected suite
		Constants.SelectedSuite=(String) cmbTestSuite.getSelectedItem();//  excel.getCellData(Constants.TestSuiteSheetname, 1, 3);
                
               // Constants.IE = Constants.Firefox = Constants.Chrome = Constants.Mobile = "";		
                 
                 if(chkMobileAutomate.isSelected())
                    Constants.Mobile =  "Mobile";
               
		
                 if(chkAllTestCases.isSelected())
                     LoadAllTestCases();
                 
		//Get all the objects from Excel and store it an array
		OR.storeObjects();
                
        if(("".equals(Constants.IE) && "".equals(Constants.Safari) && "".equals(Constants.Firefox) && "".equals(Constants.Chrome)) || ( Constants.FlaggedTCs.isEmpty() ))
                    JOptionPane.showMessageDialog(null, "Please configure the required data to launch automation","Configuration",JOptionPane.WARNING_MESSAGE);
		else  {
			
			//		int mobileTCCOunt =  Constants.MobileFlaggedTCs.size();
              
                    //Start the browser instance based on selected options.
                  Marlabs.Drivers.ExecuteThread.execute(Constants.IE,Constants.Chrome,Constants.Firefox,Constants.Safari,Constants.Mobile);
                 // pbAutomationStatus.setVisible(true);
                //  pbAutomationStatus.setValue(5);
                  //AutomationProgressTracker();
                  
                 // automationTask = new AutomationTask();
                 // automationTask.execute();
                }
    }//GEN-LAST:event_btnLaunchActionPerformed

    private void chkMobileAutomateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkMobileAutomateItemStateChanged
        if(chkMobileAutomate.isSelected())
        {
            regFrame.setVisible(false);
            smokeFrame.setVisible(false);
            if(!mobileFrame.isVisible())
            {
                mobileFrame.LoadTestCases();
                mobileFrame.setVisible(true);
                mobileFrame.setAlwaysOnTop((true));
            }
        }
    }//GEN-LAST:event_chkMobileAutomateItemStateChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       
    }//GEN-LAST:event_formWindowActivated

    private void cmbTestSuiteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTestSuiteItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            Object item = evt.getItem();
            LoadModules(item);
        }
    }//GEN-LAST:event_cmbTestSuiteItemStateChanged

    private void cmbModulesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbModulesItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            Object item = evt.getItem();
            LoadSubModules(cmbTestSuite.getSelectedItem(), item);
        }
    }//GEN-LAST:event_cmbModulesItemStateChanged

    private void cmbFrameworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFrameworkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFrameworkActionPerformed

    private void btnSelectBrowsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectBrowsersActionPerformed
        regFrame.setVisible(false);
        smokeFrame.setVisible(false);
        mobileFrame.setVisible(false);
        testCaseFrame.setVisible(false);
        browserFrame.setVisible(true);
       
    }//GEN-LAST:event_btnSelectBrowsersActionPerformed

    private void chkAllTestCasesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkAllTestCasesItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
           cmbModules.setEnabled(false);
           cmbSubModules.setEnabled(false);
        }
        else {
            cmbModules.setEnabled(true);
           cmbSubModules.setEnabled(true);
        }
    }//GEN-LAST:event_chkAllTestCasesItemStateChanged
   
    private void SetIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/logo_16x16.png"))); 
    }
    
    /**
     *
     */
    private void LoadEnvironments()
    {
        Xls_Reader excel = new Xls_Reader(Constants.TestSuitePath);
        int cellId = 1;
        String cellData = "";
        //getCmbEnvironment().removeAllItems();
        cmbEnvironment.removeAllItems();
        while(true)
        {
           cellData = (String) excel.getCellData(Constants.TestSuiteSheetname, cellId, 1);
           if(cellData.trim().length() > 0)
           {
               cmbEnvironment.addItem(cellData); 
               cellId++;
           }
           else
               break;
        }
    }
    
    private void LoadModules_Old(Object suite) {
        
        if(suite.equals("--Select--"))
             return;
        
            String suiteName = "";
            String path = "";
            String sheetName = "";

            if(suite.equals("Regression")){
                 suiteName = Constants.RegressionSuiteName;
                 path = Constants.RegressionTestSuite;
                 sheetName = Constants.RegressionModulesSheetName;
            }
             else if(suite.equals("Smoke")){
                suiteName = Constants.RegressionSuiteName;
                 path = Constants.RegressionTestSuite;
                 sheetName = Constants.RegressionModulesSheetName;
            }

            cmbModules.removeAllItems();
            Xls_Reader excel = new Xls_Reader(path);
            int cellId = 1;
            String cellData = "";
            //getCmbEnvironment().removeAllItems();
            DefaultComboBoxModel cmbModulesModel = new DefaultComboBoxModel();
            while(true)
            {
               cellData = (String) excel.getCellData(sheetName, 0, cellId);

               if(cellData.trim().length() > 0)
               {
                   cmbModulesModel.addElement(cellData);
                   
                   cellId++;
               }
               else
                   break;
            }
            
           cmbModules.setModel(cmbModulesModel);             
    }
    
    private void LoadModules(Object suite) {
         
         if(suite.equals("--Select--"))
             return;
             
            String suiteName = "";
            String path = "";
            String sheetName = "";

            if(suite.equals("Regression")){
                 suiteName = Constants.RegressionSuiteName;
                 path = Constants.RegressionTestSuite;
                 sheetName = Constants.RegressionSubModulesSheetName;
            }
             else if(suite.equals("Smoke")){
                suiteName = Constants.RegressionSuiteName;
                 path = Constants.RegressionTestSuite;
                 sheetName = Constants.RegressionSubModulesSheetName;
            }

            cmbModules.removeAllItems();
            Xls_Reader excel = new Xls_Reader(path);
            
            int cellId = 1;
            String cellData = "";
            
            int moduleColumn = 0;
            DefaultComboBoxModel cmbModulesModel = new DefaultComboBoxModel();
            while(true)
            {
               cellData = (String) excel.getCellData(sheetName, moduleColumn, cellId);

               if(cellData.trim().length() > 0)
               {
                   cmbModulesModel.addElement(cellData);
                   moduleColumn++;
               }
               else
                   break;
            }
            
            cmbModules.setModel(cmbModulesModel); 
    }
    
    private void LoadSubModules(Object suite, Object module) {
         
         if(suite.equals("--Select--") || module.equals("--Select--"))
             return;
             
            String suiteName = "";
            String path = "";
            String sheetName = "";

            if(suite.equals("Regression")){
                 suiteName = Constants.RegressionSuiteName;
                 path = Constants.RegressionTestSuite;
                 sheetName = Constants.RegressionSubModulesSheetName;
            }
             else if(suite.equals("Smoke")){
                suiteName = Constants.RegressionSuiteName;
                 path = Constants.RegressionTestSuite;
                 sheetName = Constants.RegressionSubModulesSheetName;
            }

            cmbSubModules.removeAllItems();
            Xls_Reader excel = new Xls_Reader(path);
            int cellId = 1;
            String cellData = "";
            //getCmbEnvironment().removeAllItems();
            
            int moduleColumn = 0;
            
            while(true)
            {
                cellData = (String) excel.getCellData(sheetName, moduleColumn, cellId);
                if(cellData.equals(module))
                    break; 
                else
                    moduleColumn++;
            }
            
            cellId = 2;    
            cellData = "";
             DefaultComboBoxModel cmbSubModulesModel = new DefaultComboBoxModel();
            
            while(true)
            {
               cellData = (String) excel.getCellData(sheetName, moduleColumn, cellId);

               if(cellData.trim().length() > 0)
               {
                   cmbSubModulesModel.addElement(cellData);
                   cellId++;
               }
               else
                   break;
            }
            
              cmbSubModules.setModel(cmbSubModulesModel); 
    }
    
    public void LoadAllTestCases() {
     
       Constants.FlaggedTCs.clear();

        String suiteName = "";
        String path = "";
        String sheetName = "";
        String moduleName = "";

        if(cmbTestSuite.getSelectedItem().equals("Regression")){
             suiteName = Constants.RegressionSuiteName;
             path = Constants.RegressionTestSuite;
             //sheetName = "Submodule-" + module;
        }
        else if(cmbTestSuite.getSelectedItem().equals("Smoke")){
             suiteName = Constants.RegressionSuiteName;
             path = Constants.RegressionTestSuite;
             //sheetName = "Submodule-" + module;
        }

        Xls_Reader excel = new Xls_Reader(path);
        int cellId = 1;
        String cellData = "";
        
        for(int i = 0; i < excel.getSheetCount(); i++)
        {
           sheetName = excel.GetSheetName(i);
           
           if (sheetName.startsWith("SubModule-"))
           {
               moduleName = sheetName.replace("SubModule-", "");
               int moduleColumn = 0;

                while(true)
                {
                    cellId = 1;
                    cellData = (String) excel.getCellData(sheetName, moduleColumn, cellId);
                    if(cellData.trim().length() == 0)
                        break; 
                    else
                    {
                        cellId = 2;    
                        cellData = "";

                        while(true)
                        {
                           cellData = (String) excel.getCellData(sheetName, moduleColumn, cellId);

                           if(cellData.trim().length() > 0)
                           {
                               Constants.FlaggedTCs.add(cellData);    
                               cellId++;
                           }
                           else
                               break;
                        }
                    }
                    
                    moduleColumn++;
                }
           }
        }
    }
    
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) 
        {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnLaunch;
    private javax.swing.JButton btnSelectBrowsers;
    private javax.swing.JButton btnSelectTestCases;
    private javax.swing.JCheckBox chkAllTestCases;
    private javax.swing.JCheckBox chkMobileAutomate;
    private javax.swing.JComboBox cmbEnvironment;
    private javax.swing.JComboBox cmbFramework;
    private javax.swing.JComboBox cmbModules;
    private javax.swing.JComboBox cmbSubModules;
    private javax.swing.JComboBox cmbTestSuite;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JProgressBar pbAutomationStatus;
    private javax.swing.JPanel pnlMain;
    // End of variables declaration//GEN-END:variables
    public FrameRegression regFrame = new FrameRegression();
    public FrameSmoke smokeFrame = new FrameSmoke();
    public FrameMobile mobileFrame = new FrameMobile();
    public FrameTestCases testCaseFrame = new FrameTestCases();
    public FrameBrowserSelection browserFrame = new FrameBrowserSelection();

    /**
     * @return the cmbEnvironment
     */
    public javax.swing.JComboBox getCmbEnvironment() {
        return cmbEnvironment;
    }

    /**
     * @param cmbEnvironment the cmbEnvironment to set
     */
    public void setCmbEnvironment(javax.swing.JComboBox cmbEnvironment) {
        this.cmbEnvironment = cmbEnvironment;
    }

    
}


